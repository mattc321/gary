<?php

/**
 * @file
 * Contains gary_custom.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\gary_custom\GaryFunctions;
use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 */
function gary_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gary_custom module.
    case 'help.page.gary_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Primary Module for Custom Gary Code') . '</p>';
      return $output;

    default:
  }
}

function gary_custom_preprocess_node(&$variables) {

}

/**
 * Implements hook_theme().
 */
function gary_custom_theme() {
  return [
    'gary_custom' => [
      'render element' => 'children',
    ],
  ];
}

function gary_custom_entity_display_build_alter(&$build, $context) {

  //display empty fields and labels
  if ($context['entity']->getEntityTypeId() == 'node' && $context['view_mode'] == 'full') {
    $node = $context['entity'];
    $field_instances = \Drupal\Core\Entity\Entity\EntityViewDisplay::collectRenderDisplay($node, 'full')->getComponents();
    //hidden fields naturally wont be in $field_instances
    foreach ($field_instances as $field_name => $field_instance) {
      //make sure its a real existant field
      if ($node->hasField($field_name)) {
         if (empty($node->get($field_name)->getValue())) {
           $type = $node->$field_name->getFieldDefinition()->getType();
            if ($field_name != 'uid' && $type != 'comment' && $type != 'viewfield') {
              $label = $node->$field_name->getFieldDefinition()->getLabel();
              $label_display = $field_instance['label'];
              $weight = $field_instance['weight'];
              $is_multiple = FALSE;
              $build[$field_name] = array(
                '#theme' => 'field',
                '#title' => $label,
                '#label_display' => $label_display,
                '#view_mode' => 'full',
                '#language' => 'en',
                '#field_type' => $type,
                '#field_name' => $field_name,
                '#entity_type' => 'node',
                '#is_multiple' => $is_multiple,
                '#bundle' => $node->bundle(),
                '#object' => $node,
                '#items' => array(),
                '#weight' => $weight,
                '#comment_display_mode' => '',
                0 => array('#markup' => '&nbsp;'),
              );

            }
         }

      }

    }

  }
}

function gary_custom_entity_view(array &$build, EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  if ($entity->bundle() == 'projects') {
    // $wtf = Paragraph::load(419);
  }
}

function gary_custom_entity_delete(EntityInterface $entity) {
  $helper = new GaryFunctions;

  switch ($entity->bundle()){
    case 'opportunity_services':

      //update total amount on parent
      $helper->updateTotalAmount($entity);
    break;
    case 'sub_contractors':
      //update the average grade for a sub contractor
      $helper->updateSubGrade($entity);
    break;

  }

}

function gary_custom_entity_update(EntityInterface $entity) {
  $helper = new GaryFunctions;
  //remove any old revisions on parahraphs
  $helper->cleanParagraphs($entity);

  switch ($entity->bundle()){
    case 'opportunity_services':

      //update total amount on parent
      $helper->updateTotalAmount($entity);
    break;

    case 'sub_contractors':
      //update the average grade on a sub contractor
      $helper->updateSubGrade($entity);

    break;
  }
}

function gary_custom_entity_presave(EntityInterface $entity) {
  $helper = new GaryFunctions;

  //calculate fields on project_units
  switch ($entity->bundle()){
    case 'project_units':

      //calculate ach50 field if its there
      if ($entity->hasField('field_ach50')) {
        $new_value = $helper->calculateField($entity, 'field_ach50');
        $entity->set('field_ach50', $new_value);
      }

      //calculate ach50 field if its there
      if ($entity->hasField('field_volume')) {
        $new_value = $helper->calculateField($entity, 'field_volume');
        $entity->set('field_volume', $new_value);
      }

      //update last updated field if pg item has changed
      if ($helper->entityHasChanged($entity)) {
        if ($entity->hasField('field_last_updated')) {
          $dt = new DateTime;
          $date = $dt->format("Y-m-d");
          $entity->set('field_last_updated', $date);
        }
      }

    break;

    case 'comment':

      //update the comment parent info when comment is saved
      $dt = time();
      $entity->getCommentedEntity()->setChangedTime($dt);
      $entity->getCommentedEntity()->setRevisionAuthorId(\Drupal::currentUser()->id());
      $entity->getCommentedEntity()->save();

    break;

    case 'tasks':

      //If the assigned_to field has changed, alert the person whom the task is being assigned to
      if ($helper->fieldHasChanged($entity, 'field_task_assigned_to')) {
        $assigned_to = $entity->get('field_task_assigned_to')
          ->first()
          ->get('entity')
          ->getTarget()
          ->getValue();

        $from = $entity->getRevisionAuthor();

        $parent_nid = $helper->getParentNid($entity);
        $parent_node = \Drupal::entityManager()
          ->getStorage('node')
          ->load($parent_nid);

        if ($parent_node->hasField('field_account_reference')) {
          $account_title = $parent_node->get('field_account_reference')
            ->first()
            ->get('entity')
            ->getTarget()
            ->getValue()
            ->getTitle();
        } else {
          $account_title = 'No Account Set';
        }

        $parent_title = $parent_node->getTitle();
        $bundle = $parent_node->bundle();

        $params = array(
          'to_email' => $assigned_to->getEmail(),
          'from_email' => $from->getEmail(),
          'from_name' => $from->getDisplayName(),
          'task_title' => $entity->getTitle(),
          'task_id' => $entity->id(),
          'account_title' => $account_title,
          'parent_title' => $parent_title,
          'parent_bundle' => $bundle,
        );

        $mailManager = \Drupal::service('plugin.manager.mail');
        $module = 'gary_custom';
        $key = 'notify_assignee';
        $params['values'] = $params;
        $langcode = \Drupal::currentUser()->getPreferredLangcode();
        $send = true;
        $result = $mailManager->mail($module, $key, $assigned_to->getEmail(), $langcode, $params, NULL, $send);

        if ($result['result'] !== true) {
          $messenger = \Drupal::messenger();
          $messenger->addMessage('An error happened and the notification to the assignee was not sent', $messenger::TYPE_WARNING);
          return FALSE;
        } else {
          return TRUE;
        }
      }
    break;

    default:
    break;
  }

}

function gary_custom_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
}

function gary_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //use select2 type on these multiselect elements
  $multiselects = [
    'field_task_assigned_to_target_id',
    'field_project_status_target_id'
  ];

  foreach ($multiselects as $element) {
    if (isset($form[$element]) && $form[$element]['#type'] == 'select' && $form[$element]['#multiple']) {
      $form[$element]['#type'] = 'select2';
    }
  }

  if (isset($form['field_account_reference_target_id'])) {
    $form['field_account_reference_target_id']['#size'] = 30;
  }

  //Opportunity Services Calculation
  if ($form_id == 'inline_pg_form_field_opportunity_services_ref') {
    $form['#attached']['library'][] = 'gary_custom/service_price';

    //js listeners in js/service-price
    $form['container']['field_opportunity_service']['widget']['#attributes']['class'][] = "calculate-price";
    $form['container']['field_quantity']['widget'][0]['value']['#attributes']['class'][] = "update-price";
  }
}

/**
* Implements hook_mail().
*/
function gary_custom_mail($key, &$message, $params) {

 $options = array(
   'langcode' => $message['langcode'],
 );
 switch ($key) {

   //prepare email for comments tagged in opps or projects
   case 'notify_assignee':

     $message['from'] = \Drupal::config('system.site')->get('mail');
    //  $message['from'] = $params['from_email'];
    //  $message['to'] = $params['to_email'];

     $message['subject'] = t('A task was assigned to you: @account - @title', array(
      '@account' => $params['account_title'],
      '@title' => $params['parent_title']));

     $message['body'][] = t('@who has assigned a task to you: @ttitle', array(
      '@who' => $params['from_name'],
      '@ttitle' => $params['task_title']));

     $message['body'][] = '<br/>';
     $message['body'][] = t('Builder/Account: @account', array('@account' => $params['account_title']));
     $message['body'][] = '<br/>';
     $message['body'][] = t('Title/Project: @title', array('@title' => $params['parent_title']));
     $message['body'][] = '<br/>';

     $message['headers'] = [
      'content-type' => 'text/html',
      'MIME-Version' => '1.0',
      'reply-to' => $message['from'],
      'Return-Path' => $message['from'],
      'from' => 'Admin <'.$message['from'].'>'
     ];

     $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$params['task_id']);
     $host = \Drupal::request()->getSchemeAndHttpHost();
     $message['body'][] = t('Go here to view: @host@alias', array('@alias' => $alias, '@host' => $host));
     break;

     //prepare email for comment tags in tasks
     case 'comment_task_tag':

       $message['from'] = \Drupal::config('system.site')->get('mail');

       //Comment Tag: Account - Task Title (Project Title)
       $message['subject'] = t('Comment Tag: @account - @task_title (@parent_title)', array(
          '@account' => $params['account_title'],
          '@task_title' => $params['node_title'],
          '@parent_title' => $params['parent_title']));

       $message['body'][] = t('Posted by: @who', array('@who' => $params['poster_name']));
       $message['body'][] = '</br>';
       $message['body'][] = t('Builder/Account: @account', array('@account' => $params['account_title']));
       $message['body'][] = '</br>';
       $message['body'][] = t('Title/@bundle: @title (@parent_title)', array(
          '@title' => $params['node_title'],
          '@bundle' => ucfirst($params['parent_bundle']),
          '@parent_title' => $params['parent_title']));
       $message['body'][] = '</br>';
       $message['body'][] = t('Comment: @cbod', array('@cbod' => $params['body']));
       $message['body'][] = '</br>';

       $message['headers'] = [
        'content-type' => 'text/html',
        'MIME-Version' => '1.0',
        'reply-to' => $message['from'],
        'from' => 'Admin <'.$message['from'].'>'
       ];

       $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$params['node_id']);
       $host = \Drupal::request()->getSchemeAndHttpHost();
       $message['body'][] = t('Go here to view: @host@alias', array('@alias' => $alias, '@host' => $host));
       break;
 }
}
