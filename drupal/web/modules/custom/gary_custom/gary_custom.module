<?php

/**
 * @file
 * Contains gary_custom.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\gary_custom\GaryFunctions;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\user\Entity\User;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\gary_custom\Event\UserLoginEvent;
/**
 * Implements hook_help().
 */
function gary_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gary_custom module.
    case 'help.page.gary_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Primary Module for Custom Gary Code') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_theme().
 */
function gary_custom_theme() {
  return [
    'gary_custom' => [
      'render element' => 'children',
    ]
  ];
}

function gary_custom_entity_display_build_alter(&$build, $context) {

  //display empty fields and labels
  if ($context['entity']->getEntityTypeId() == 'node' && $context['view_mode'] == 'full') {
    $node = $context['entity'];
    $field_instances = \Drupal\Core\Entity\Entity\EntityViewDisplay::collectRenderDisplay($node, 'full')->getComponents();
    //hidden fields naturally wont be in $field_instances
    foreach ($field_instances as $field_name => $field_instance) {
      //make sure its a real existant field
      if ($node->hasField($field_name)) {
         if (empty($node->get($field_name)->getValue())) {
           $type = $node->$field_name->getFieldDefinition()->getType();
            if ($field_name != 'uid' && $type != 'comment' && $type != 'viewfield') {
              $label = $node->$field_name->getFieldDefinition()->getLabel();
              $label_display = $field_instance['label'];
              $weight = $field_instance['weight'];
              $is_multiple = FALSE;
              $build[$field_name] = [
                '#theme' => 'field',
                '#title' => $label,
                '#label_display' => $label_display,
                '#view_mode' => 'full',
                '#language' => 'en',
                '#field_type' => $type,
                '#field_name' => $field_name,
                '#entity_type' => 'node',
                '#is_multiple' => $is_multiple,
                '#bundle' => $node->bundle(),
                '#object' => $node,
                '#items' => array(),
                '#weight' => $weight,
                '#comment_display_mode' => '',
                0 => array('#markup' => '&nbsp;'),
              ];
            }
         }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gary_custom_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['#submit'][] = 'gary_custom_user_login_submit';

}

/**
 * Form submission handler for user_login_form().
 *
 * Redirects the user to the dashboard after logging in.
 */
function gary_custom_user_login_submit(&$form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');

  $request = \Drupal::service('request_stack')->getCurrentRequest();
  if (!$request->request->has('destination')) {
    $form_state->setRedirectUrl($url);
  }
  else {
    $request->query->set('destination', $request->request->get('destination'));
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function gary_custom_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {

  //grab the node and add this tab if its an opportunities
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->bundle() == 'opportunities') {

      //check to see if a project has already been created. If not, show the link
      if (count(GaryFunctions::getReferencedProject($node->id())) < 1) {
        // Add a tab linking to node/add to all pages.
        $data['tabs'][0]['entity.node.canonical'] = [
          '#theme' => 'menu_local_task',
          '#link' => [
            'title' => t('Create Project'),
            'url' =>  \Drupal\Core\Url::fromRoute('node.add', ['node_type' => 'projects'], ['query' => ['oid' => $node->id()]]),
            'localized_options' => [],
          ],
          '#active' => FALSE,
          '#weight' => 15,
        ];
        $data['tabs'][0]['entity.node.canonical']['#attributes']['class'][] = 'create-project';

        // The tab we're adding is dependent on a user's access to add content.
        $cacheability
          ->addCacheTags([
          'user.permissions',
        ]);
      }
    }
  }
}

function gary_custom_link_alter(&$variables) {

  $url = $variables['url'];
  //return early if possible
  if ($url->isExternal()) {
    return;
  }
  //incase theres unroute, return
  try {
    $route_name = $url->getRouteName();
  }
  catch (exception $e) {
    return;
  }

  $route = $url->getRouteName();

  //Night Mode Palette Changer setup
  if($route=='gary_custom.change_palette') {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasField('field_color')) {
      $color = 'light';
    } else {
      $color = $user->field_color->value;
    }
    $variables['options']['attributes']['palette-selector'] = 'change-palette';
    $variables['options']['attributes']['current-palette'] = $color;
  }

  //Mobile Reroute of some views
  //[route_match] => 'reroute'
  $mobile_route_matches = [
    'view.opportunity.page_1' => 'view.opportunity.mobile_page',
    'view.projects.page_1' => 'view.projects.mobile_page',
    'view.contacts.page_1' => 'view.contacts.mobile_page',
    'view.accounts.page_1' => 'view.accounts.mobile_page',
    'view.tasks.page_1' => 'view.tasks.mobile_page',
    'view.final_submittals.page_1' => 'view.final_submittals.mobile_page',
  ];
  //get user temp storage
  $tempstore = \Drupal::service('tempstore.private')->get('gary_custom');
  //check if were mobile return if not
  if (!$tempstore->get('is_mobile')) {
    return;
  }
  //if we have a route match rewrite to its mobile route. The view contains this block
  if(isset($mobile_route_matches[$route])) {
    $route_provider = \Drupal::service('router.route_provider');
    //check the mobile route. If it doesnt exist then bounce
    try {
      $new_route = $route_provider->getRouteByName($mobile_route_matches[$route]);
    }
    catch (exception $e){
      return;
    }
    $new_url = Url::fromRoute($new_route);
    $variables['url'] = $new_url;
  }

}

function gary_custom_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $helper = new GaryFunctions;


  switch ($entity->bundle()){
    case 'projects':
    // if (isset($_GET['ss'])) {
    //   $node = \Drupal::entityTypeManager()->getStorage('node')->load(26793);
    //   $current = $node->get('field_project_units')->getValue();
    //
    //   $pg_items = [];
    //   for ($i = 1; $i<=5; $i++) {
    //     $pg_item = Paragraph::create(['type' => 'project_units',]);
    //     $pg_item->isNew();
    //     $pg_item->save();
    //
    //     $pg_items[] = array(
    //         'target_id' => $pg_item->id(),
    //         'target_revision_id' => $pg_item->getRevisionId(),
    //       );
    //   }
    //   ksm($current);
    //   ksm($pg_items);
    //   $current = array_merge($current, $pg_items);
    //   ksm($current);
    //   $node->set('field_project_units', $current);
    //   $node->save();
    // }
      $term_id = $entity->field_permit_city->target_id;
      if (!empty($term_id)) {
        $terms = \Drupal\taxonomy\Entity\Term::load($term_id);
        if (empty($terms)) {
          return;
        }
        $cityName = $terms->getName();
        $cityUrl = $terms->field_permit_url->value;
        if (count($build['field_permit_number']['#items']) == 0) {
          return;
        }
        foreach ($build['field_permit_number']['#items']->getIterator() as $key => $permit) {
          $permitNum = $permit->value;
          $permitInsert = str_replace("[permit]", $permitNum, $cityUrl);
          $cityInsert = str_replace("[city]", $cityName, $permitInsert);
          $build['field_permit_number'][$key]['#context']['value'] = Markup::create('<a href="'.$cityInsert.'" target="_blank">'.$permitNum.'</a>');
        }
      }

    break;

    case 'opportunities':
      //Messing with quick edit functionality
      //display address field as link to google maps
      // $ad = $entity->field_address->value;
      // $city = $entity->field_address->value;
      // $st = $entity->field_address->value;
      // $zip = $entity->field_address->value;
      // $address_search = '<a href="https://www.google.com/maps?q='.
      //   $ad.','.$city.','.$st.','.$zip.'," target="_blank">'.$ad.'</a>';
      // $build['field_address'][0]['#context']['value'] = Markup::create($address_search);
    break;

    case 'contacts':
      //Messing with quick edit functionality
      //display contact phone and email with action output
      // $contact = $entity->field_contact_email->value;
      // $email = '<a href="mailto:'.$contact.'" target="_blank">'.$contact.'</a>';
      // $build['field_contact_email'][0]['#context']['value'] = Markup::create($email);
      //
      // $phone = $entity->field_contact_phone->value;
      // $phone_link = '<a href="tel:'.$phone.'" target="_blank">'.$phone.'</a>';
      // $build['field_contact_phone'][0]['#context']['value'] = Markup::create($phone_link);
    break;

  }
}

function gary_custom_entity_delete(EntityInterface $entity) {
  $helper = new GaryFunctions;

  switch ($entity->bundle()) {
    case 'opportunity_services':

      //if the parent entity origin is empty it is probably deleted in which
      //case dont recalculate
      if (!empty($entity->getParentEntity()->original)) {
        //update total amount on parent
        $helper->updateTotalAmount($entity);
      }

    break;

    case 'sub_contractors':
      //update the average grade for a sub contractor
      $helper->updateSubGrade($entity);
    break;

    case 'opportunities':
      //delete all tasks associated with a opp if it is deleted
      if ($entity->hasField('field_tasks')) {
        if(!$entity->get('field_tasks')->isEmpty()) {
          $tasks = $entity->get('field_tasks')->referencedEntities();
          foreach ($tasks as $task) {
            $task->delete();
          }
        }
      }
    break;

    case 'projects':

      //delete all tasks associated with a project if it is deleted
      if ($entity->hasField('field_tasks')) {
        if(!$entity->get('field_tasks')->isEmpty()) {
          $tasks = $entity->get('field_tasks')->referencedEntities();
          foreach ($tasks as $task) {
            $task->delete();
          }
        }
      }
    break;

    case 'tasks':

      $parent = Node::load($helper->getParentNid($entity));

      $helper->removeDeletedEntityFromParentEntityParagraph(
        $parent,
        $entity,
        'field_tasks'
      );
      break;

  }

}

function gary_custom_entity_insert(EntityInterface $entity) {
  $helper = new GaryFunctions;

  switch ($entity->bundle()){
    case 'tasks':
      //the notify assignee upon new task event is handled in gary_field_formatter unfortunately.
      //check InlineForm.php in the ajax rebuild
    break;

    default:
    break;
  }
}

function gary_custom_entity_update(EntityInterface $entity) {
  $helper = new GaryFunctions;
  // //remove any old revisions on paragraphs
  $helper->cleanParagraphs($entity);
  //
  switch ($entity->bundle()){
    case 'opportunity_services':
      //update total amount on parent
      $helper->updateTotalAmount($entity);
    break;

    case 'sub_contractors':
      //update the average grade on a sub contractor
      $helper->updateSubGrade($entity);

    break;
  }
}

function gary_custom_entity_presave(EntityInterface $entity) {
  $helper = new GaryFunctions;

  //calculate fields on project_units
  switch ($entity->bundle()){
    case 'project_units':
      //calculate ach50 field if its there
      if ($entity->hasField('field_ach50')) {
        $new_value = $helper->calculateField($entity, 'field_ach50');
        $entity->set('field_ach50', $new_value);
      }

      //calculate ach50 field if its there
      if ($entity->hasField('field_volume')) {
        $new_value = $helper->calculateField($entity, 'field_volume');
        $entity->set('field_volume', $new_value);
      }

      //update last updated field if pg item has changed
      if ($helper->entityHasChanged($entity)) {
        if ($entity->hasField('field_last_updated')) {
          $dt = new DateTime;
          $date = $dt->format("Y-m-d");
          $entity->set('field_last_updated', $date);
        }
      }

    break;

    case 'comment':
      //update the comment parent info when comment is saved
      $dt = time();
      $entity->getCommentedEntity()->setChangedTime($dt);
      $entity->getCommentedEntity()->setRevisionUserId(\Drupal::currentUser()->id());
      $entity->getCommentedEntity()->save();

    break;

    case 'tasks':
      //If the assigned_to field has changed, alert the person whom the task is being assigned to
      if ($helper->fieldHasChanged($entity, 'field_task_assigned_to')) {
        // $helper->notifyAssignee($entity);
        \Drupal::logger('gary_custom')->error('would have notified assignee');

      }

    break;

    case 'opportunities':
      //bring over account manager from the builder account
      if ($entity->isNew()) {
        $account_mgr = $helper->getDefaultAccountManagerIfNeeded($entity);
        if (!empty($account_mgr)) {
          $entity->set('field_account_manager', $account_mgr);
        }
      }

      //if cancelling or closing the opp, close all of its tasks
      if ($helper->fieldHasChanged($entity, 'field_opportunity_type')) {
        //cancelled tid 60 closed 61
        if (!$entity->get('field_opportunity_type')->isEmpty()) {
          $tid = $entity->get('field_opportunity_type')->getValue()[0]['target_id'];
          if ($tid == 60 || $tid == 61) {
            $helper->closeAllTasks($entity);
          }
        }
      }

      if ($entity->isNew()) {
        //create opportunity auto tasks if new
        $new_tasks = $helper->createOpportunityAutoTasks($entity);
        if (!empty($new_tasks)) {
          $entity->set('field_tasks', $new_tasks);
        }
      }

      //update the total service price
      $total_service_price = $helper->getTotalServiceAmount($entity);
      if ($entity->hasField('field_amount')) {
        $entity->set('field_amount', $total_service_price);
      }

    break;
    case 'projects':

      if ($entity->isNew()) {
        //if project is new, load its opportunity then its service
        //then load auto tasks associated with that service, create new
        //tasks and attach them to the project
        $new_nodes = $helper->createReturnAutoTasks($entity);
        if (!empty($new_nodes)) {
          //tasks were created
          $entity->set('field_tasks', $new_nodes);
        }

        //bring over opportunity contacts
        $contacts = $helper->createContacts($entity);
        if (!empty($contacts)) {
          $entity->set('field_project_contacts', $contacts);
        }
      }

      //if cancelling or completing the project, close all of its tasks
      if ($helper->fieldHasChanged($entity, 'field_project_status')) {
        //cancelled tid 70 completed 72
        if (!$entity->get('field_project_status')->isEmpty()) {
          $tid = $entity->get('field_project_status')->getValue()[0]['target_id'];
          if ($tid == 70 || $tid == 72) {
            $helper->closeAllTasks($entity);
          }
        }
      }
    break;
    default:
    break;
  }

}

function gary_custom_form_node_projects_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //if oid is set, were making a new project, load the opp node and load some values
  if (isset($_GET['oid'])) {
    $opportunity_id = $_GET['oid'];
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    $opportunity = $node_storage->load($opportunity_id);

    $fields = [
      'field_address',
      'field_city',
      'field_state',
      'field_zip',
      'field_account_reference'
    ];
    $er = FALSE;
    foreach ($fields as $field) {
      if (!$opportunity->hasField($field)) {
        $messenger = \Drupal::messenger();
        $messenger->addMessage('Fields are missing from the opportunity! Cannot set default values.', $messenger::TYPE_WARNING);
        \Drupal::logger('gary_custom')->error('Fields are missing on the opportunity, cannot create project');
        $er = TRUE;
      }
    }
    //if no errors then set default values
    if (!$er) {

      if (!$opportunity->get('field_account_reference')->isEmpty()) {
        $builder = $node_storage
          ->load($opportunity
          ->get('field_account_reference')
          ->getValue()[0]['target_id']);

        $form['field_account_reference']['widget'][0]['target_id']['#default_value']= $builder;
      }
      $form['title']['widget'][0]['value']['#default_value']= $opportunity->getTitle();
      $form['field_address']['widget'][0]['value']['#default_value']= $opportunity->field_address->value;
      $form['field_city']['widget'][0]['value']['#default_value']=$opportunity->field_city->value;
      $form['field_state']['widget'][0]['value']['#default_value']=$opportunity->field_state->value;
      $form['field_zip']['widget'][0]['value']['#default_value']=$opportunity->field_zip->value;
      $form['field_opportunity']['widget'][0]['target_id']['#default_value']= $opportunity;
    }
  }

  //alert the user that contacts will be brought over automatically
  $prefix = '<p>Contacts will be brought over autoimatically after saving the project</p>'.
    $form['field_project_contacts']['widget'][0]['#prefix'];
  $form['field_project_contacts']['widget'][0]['#prefix'] = $prefix;

}

function gary_custom_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  //projects exposed filter form edits
  $view_ids = ['projects'];
  $view = $form_state->getStorage('view');
  if ($form_id == 'views_exposed_form' && in_array($view['view']->id(), $view_ids)) {
    //change operator to radios and unset those we dont want to use
    $form['field_project_status_target_id_wrapper']['field_project_status_target_id_op']['#type'] = 'radios';
    unset($form['field_project_status_target_id_wrapper']['field_project_status_target_id_op']['#options']['and']);
    unset($form['field_project_status_target_id_wrapper']['field_project_status_target_id_op']['#options']['empty']);
    unset($form['field_project_status_target_id_wrapper']['field_project_status_target_id_op']['#options']['not empty']);

    $form['field_project_status_target_id_wrapper']['field_project_status_target_id_op']['#options']['or'] = 'Equal to';
    $form['field_project_status_target_id_wrapper']['field_project_status_target_id_op']['#options']['not'] = 'Not equal to';
    $form['field_project_status_target_id_wrapper']['field_project_status_target_id_op']['#title'] = t('Project Status');
  }
}

function gary_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  //fix the views forms. If form is refreshred by ajax
  //the action gets overwritten. Change action back to current page issue #2820347
  if ($form_state->getFormObject() instanceof \Drupal\views\Form\ViewsForm) {
    //only proceed to overwrite action on ViewsForm hitting views.ajax
    if (\Drupal::routeMatch()->getRouteName() == 'views.ajax') {
      $current_stack = \Drupal::service('path.current')->getPath();
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_stack);
      $form['#action'] = str_replace('//', '/', $alias); //double slashses returned I have no idea
    }
  }

  //change default save_order to use a jelly button
  if (isset($form['actions']['save_order'])) {
    $form['actions']['save_order']['#attributes']['jelly'] = 'check';
  }

  //in the edit form view these controls are nested subforms
  if (isset($form["field_opportunity_services_ref"]["widget"]) && count($form["field_opportunity_services_ref"]["widget"]) > 0) {
    foreach ($form["field_opportunity_services_ref"]["widget"] as $index => $widget) {
      if (isset($widget["subform"]["field_opportunity_service"]["widget"]["#type"])) {
        $form["field_opportunity_services_ref"]["widget"][$index]["subform"]["field_opportunity_service"]["widget"]["#type"] = 'select2';
        $form["field_opportunity_services_ref"]["widget"][$index]["#attributes"]['class'][] = 'opportunity-service-select-2';
      }
    }
  }

  //if save order and save entities are both set lets consolidate that into one submit
  //hide the save order button. Goes with patch to saveEntities() which calls draggableviews_views_submit
  //directly if needed
  if (isset($form['actions']['save_order']) && isset($form['actions']['save_entities'])) {
    $form['actions']['save_order']['#access'] = false;
  }


  //use select2 type on these multiselect elements
  $multiselectsNested = [
    'field_task_assigned_to_target_id',
    'field_project_status_target_id_wrapper' => 'field_project_status_target_id',
    'field_opportunity_type_target_id'
  ];

  foreach ($multiselectsNested as $key => $element) {
    if (isset($form[$key][$element]) && $form[$key][$element]['#type'] == 'select') {
      if(isset($form[$key][$element]['#multiple'])) {
        $form[$key][$element]['#type'] = 'select2';
      }
    }
  }

  //use select2 type on these multiselect elements
  $multiselects = [
    'field_task_assigned_to_target_id',
    'field_project_status_target_id',
    'field_opportunity_type_target_id'
  ];

  foreach ($multiselects as $key => $element) {
    if (isset($form[$element]) && $form[$element]['#type'] == 'select') {
      if(isset($form[$element]['#multiple'])) {
        $form[$element]['#type'] = 'select2';
      }
    }
  }

  if (isset($form['field_account_reference_target_id'])) {
    $form['field_account_reference_target_id']['#size'] = 30;
  }

  //display only assignees in drop down for inline pg form
  //this field further overwritten in hooK_field_widget_form_alter
  if (isset($form['container']['field_task_assigned_to'])) {
    $assignees = GaryFunctions::loadUsersByRole('assignees');
    $options = [];
    $options['_none'] = '- None -';
    foreach ($assignees as $uid => $assignee) {
      $options[$uid] = $assignee->getDisplayName();
    }
    $form['container']['field_task_assigned_to']['widget']['#options'] = $options;
  }
  if (isset($form['field_account_manager'])) {
    $assignees = GaryFunctions::loadUsersByRole('assignees');
    $options = [];
    $options['_none'] = t('- None -');
    foreach ($assignees as $uid => $assignee) {
      $options[$uid] = $assignee->getDisplayName();
    }
    $form['field_account_manager']['widget']['#options'] = $options;
  }

  if (isset($form['field_account_manager_target_id'])) {
    $assignees = GaryFunctions::loadUsersByRole('assignees');
    $options = [];
    $options['All'] = t('- Any -');
    foreach ($assignees as $uid => $assignee) {
      $options[$uid] = $assignee->getDisplayName();
    }
    $form['field_account_manager_target_id']['#options'] = $options;
  }

  //load service options manually. We need to have the price available in the
  //option string. Cant use Entity Reference Views because they are loaded on all
  //other views recursively where they are present
  if($form_id == 'inline_pg_form_field_opportunity_services_ref' ||
    $form_id == 'inline_pg_form_new_item_field_opportunity_services_ref') {
    if (isset($form['container']['field_opportunity_service']['widget'])) {
      $services = GaryFunctions::getServiceOptions();
      $options['_none'] = "- None -";
      foreach ($services as $service) {
        $options[$service->nid] = $service->title.' - $'.$service->field_unit_price_value;
      }
      $form['container']['field_opportunity_service']['widget']['#options'] = $options;
    }
  }

  //Opportunity Services Calculation
  if ($form_id == 'inline_pg_form_field_opportunity_services_ref' ||
      $form_id == 'inline_pg_form_new_item_field_opportunity_services_ref') {
    $form['#cache'] = ['max-age' => 0];
    $form['#attached']['library'][] = 'gary_custom/service_price';

    //js listeners in js/service-price
    $form['container']['field_opportunity_service']['widget']['#attributes']['class'][] = "calculate-price";
    $form['container']['field_quantity']['widget'][0]['value']['#attributes']['class'][] = "update-price";

    //add target classes
    $form['container']['field_line_total']['widget'][0]['value']['#attributes']['class'][] = "service-line-total";
    $form['container']['field_quantity']['widget'][0]['value']['#attributes']['class'][] = "service-quantity";
    $form['container']['field_service_amount']['widget'][0]['value']['#attributes']['class'][] = "service-price";
  }

  //attach the service price js to edit form
  if ($form_id == 'node_opportunities_edit_form' || $form_id == 'node_opportunities_form') {
    $form['#attached']['library'][] = 'gary_custom/service_price';
  }

}

function gary_custom_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  //change available options to assignees role only
  if (isset($element['#field_parents'])) {
    $first = reset($element['#field_parents']);
    if ($first == 'form_field_field_task_assigned_to') {
      $assignees = GaryFunctions::loadUsersByRole('assignees');
      $options['_none'] = '- None -';
      foreach ($assignees as $uid => $assignee) {
        $options[$uid] = $assignee->getDisplayName();
      }
      $element['#options'] = $options;
    }

  }
  //this is for the node edit form of inline_pg_form services
  if (isset($element['#paragraph_type'])
    && $element['#paragraph_type'] == 'opportunity_services') {

    //add listener classes
    $element["subform"]["field_opportunity_service"]["widget"]["#attributes"]["class"][] = 'calculate-price';
    $element["subform"]["field_quantity"]["widget"][0]["value"]["#attributes"]["class"][] = 'update-price';

    //add identifier classes
    $element["subform"]["field_line_total"]["widget"][0]["value"]["#attributes"]["class"][] = 'service-line-total';
    $element["subform"]["field_service_amount"]["widget"][0]["value"]["#attributes"]["class"][] = 'service-price';
    $element["subform"]["field_quantity"]["widget"][0]["value"]["#attributes"]["class"][] = 'service-quantity';

    //append price to service select
    $services = GaryFunctions::getServiceOptions();
    $options['_none'] = "- None -";
    foreach ($services as $service) {
      $options[$service->nid] = $service->title.' - $'.$service->field_unit_price_value;
    }

    $element["subform"]["field_opportunity_service"]["widget"]["#options"] = $options;
  }

}

/**
* Implements hook_mail().
*/
function gary_custom_mail($key, &$message, $params) {

 $options = array(
   'langcode' => $message['langcode'],
 );
 switch ($key) {

   //prepare email for comments tagged in opps or projects
   case 'notify_assignee':

     $message['from'] = \Drupal::config('system.site')->get('mail');
     $message['subject'] = t('A task was assigned to you: @account - @title', array(
      '@account' => $params['account_title'],
      '@title' => $params['parent_title']));

     $message['body'][] = t('@who has assigned a task to you: @ttitle', array(
      '@who' => $params['from_name'],
      '@ttitle' => $params['task_title']));

     $message['body'][] = '<br/>';
     $message['body'][] = t('Builder/Account: @account', array('@account' => $params['account_title']));
     $message['body'][] = '<br/>';
     $message['body'][] = t('Title/Project: @title', array('@title' => $params['parent_title']));
     $message['body'][] = '<br/>';

     $message['headers'] = [
      'content-type' => 'text/html',
      'MIME-Version' => '1.0',
      'reply-to' => $message['from'],
      'Return-Path' => $message['from'],
      'from' => 'Admin <'.$message['from'].'>'
     ];

     $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$params['task_id']);
     $host = \Drupal::request()->getSchemeAndHttpHost();
     $message['body'][] = t('Go here to view: @host@alias', array('@alias' => $alias, '@host' => $host));
   break;

   //prepare email for comment tags in tasks
   case 'comment_task_tag':
     // $message['from'] = \Drupal::config('system.site')->get('mail');
     $message['from'] = $params['poster'];

     //Comment Tag: Account - Task Title (Project Title)
     $message['subject'] = t('Comment Tag: @account - @task_title (@parent_title)', array(
        '@account' => $params['account_title'],
        '@task_title' => $params['node_title'],
        '@parent_title' => $params['parent_title']));

     $message['body'][] = t('Posted by: @who', array('@who' => $params['poster_name']));
     $message['body'][] = '</br>';
     $message['body'][] = t('Builder/Account: @account', array('@account' => $params['account_title']));
     $message['body'][] = '</br>';
     $message['body'][] = t('Title/@bundle: @title (@parent_title)', array(
        '@title' => $params['node_title'],
        '@bundle' => ucfirst($params['parent_bundle']),
        '@parent_title' => $params['parent_title']));
     $message['body'][] = '</br>';
     $message['body'][] = t('Comment: @cbod', array('@cbod' => $params['body']));
     $message['body'][] = '</br>';

     $message['headers'] = [
      'content-type' => 'text/html',
      'MIME-Version' => '1.0',
      'reply-to' => $params['poster'],
      'from' => $params['poster_name'].' <'.$params['poster'].'>'
     ];
     $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$params['node_id']);
     $host = \Drupal::request()->getSchemeAndHttpHost();
     $message['body'][] = t('Go here to view: @host@alias', array('@alias' => $alias, '@host' => $host));
   break;
 }
}


function gary_custom_page_attachments(array &$page) {
    $page['#attached']['library'][] = 'gary_custom/custom';
}
