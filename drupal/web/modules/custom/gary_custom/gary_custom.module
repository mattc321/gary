<?php

/**
 * @file
 * Contains gary_custom.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\gary_custom\GaryFunctions;
use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\user\Entity\User;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function gary_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gary_custom module.
    case 'help.page.gary_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Primary Module for Custom Gary Code') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_theme().
 */
function gary_custom_theme() {
  return [
    'gary_custom' => [
      'render element' => 'children',
    ],
  ];
}

function gary_custom_entity_display_build_alter(&$build, $context) {

  //display empty fields and labels
  if ($context['entity']->getEntityTypeId() == 'node' && $context['view_mode'] == 'full') {
    $node = $context['entity'];
    $field_instances = \Drupal\Core\Entity\Entity\EntityViewDisplay::collectRenderDisplay($node, 'full')->getComponents();
    //hidden fields naturally wont be in $field_instances
    foreach ($field_instances as $field_name => $field_instance) {
      //make sure its a real existant field
      if ($node->hasField($field_name)) {
         if (empty($node->get($field_name)->getValue())) {
           $type = $node->$field_name->getFieldDefinition()->getType();
            if ($field_name != 'uid' && $type != 'comment' && $type != 'viewfield') {
              $label = $node->$field_name->getFieldDefinition()->getLabel();
              $label_display = $field_instance['label'];
              $weight = $field_instance['weight'];
              $is_multiple = FALSE;
              $build[$field_name] = [
                '#theme' => 'field',
                '#title' => $label,
                '#label_display' => $label_display,
                '#view_mode' => 'full',
                '#language' => 'en',
                '#field_type' => $type,
                '#field_name' => $field_name,
                '#entity_type' => 'node',
                '#is_multiple' => $is_multiple,
                '#bundle' => $node->bundle(),
                '#object' => $node,
                '#items' => array(),
                '#weight' => $weight,
                '#comment_display_mode' => '',
                0 => array('#markup' => '&nbsp;'),
              ];
            }
         }
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function gary_custom_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {

  //grab the node and add this tab if its an opportunities
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->bundle() == 'opportunities') {

      //check to see if a project has already been created. If not, show the link
      if (count(GaryFunctions::getReferencedProject($node->id())) < 1) {
        // Add a tab linking to node/add to all pages.
        $data['tabs'][0]['entity.node.canonical'] = [
          '#theme' => 'menu_local_task',
          '#link' => [
            'title' => t('Create Project'),
            'url' =>  \Drupal\Core\Url::fromRoute('node.add', ['node_type' => 'projects'], ['query' => ['oid' => $node->id()]]),
            'localized_options' => [],
          ],
          '#active' => FALSE,
          '#weight' => 15,
        ];
        $data['tabs'][0]['entity.node.canonical']['#attributes']['class'][] = 'create-project';

        // The tab we're adding is dependent on a user's access to add content.
        $cacheability
          ->addCacheTags([
          'user.permissions',
        ]);
      }
    }
  }
}

function gary_custom_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $helper = new GaryFunctions;

  switch ($entity->bundle()){
    case 'projects':
    if ($_GET['p'] ==1 ) {
      $helper->createReturnAutoTasks($entity);
      // $entity->set('field_task_weight', "2");
      // $entity->save();
    }
    // ksm($entity->field_task_weight->value);


    break;
  }
}

function gary_custom_entity_delete(EntityInterface $entity) {
  $helper = new GaryFunctions;

  switch ($entity->bundle()){
    case 'opportunity_services':

      //update total amount on parent
      $helper->updateTotalAmount($entity);
    break;
    case 'sub_contractors':
      //update the average grade for a sub contractor
      $helper->updateSubGrade($entity);
    break;

  }

}

function gary_custom_entity_insert(EntityInterface $entity) {
  $helper = new GaryFunctions;

  switch ($entity->bundle()){
    case 'tasks':
      //the notify assignee upon new task event is handled in gary_field_formatter unfortunately.
      //check InlineForm.php in the ajax rebuild
    break;

    default:
    break;
  }
}

function gary_custom_entity_update(EntityInterface $entity) {
  $helper = new GaryFunctions;
  //remove any old revisions on paragraphs
  $helper->cleanParagraphs($entity);

  switch ($entity->bundle()){
    case 'opportunity_services':
      //update total amount on parent
      $helper->updateTotalAmount($entity);
    break;

    case 'sub_contractors':
      //update the average grade on a sub contractor
      $helper->updateSubGrade($entity);

    break;
  }
}

function gary_custom_entity_presave(EntityInterface $entity) {
  $helper = new GaryFunctions;

  //calculate fields on project_units
  switch ($entity->bundle()){
    case 'project_units':
      //calculate ach50 field if its there
      if ($entity->hasField('field_ach50')) {
        $new_value = $helper->calculateField($entity, 'field_ach50');
        $entity->set('field_ach50', $new_value);
      }

      //calculate ach50 field if its there
      if ($entity->hasField('field_volume')) {
        $new_value = $helper->calculateField($entity, 'field_volume');
        $entity->set('field_volume', $new_value);
      }

      //update last updated field if pg item has changed
      if ($helper->entityHasChanged($entity)) {
        if ($entity->hasField('field_last_updated')) {
          $dt = new DateTime;
          $date = $dt->format("Y-m-d");
          $entity->set('field_last_updated', $date);
        }
      }

    break;

    case 'comment':
      //update the comment parent info when comment is saved
      $dt = time();
      $entity->getCommentedEntity()->setChangedTime($dt);
      $entity->getCommentedEntity()->setRevisionAuthorId(\Drupal::currentUser()->id());
      $entity->getCommentedEntity()->save();

    break;

    case 'tasks':
      //If the assigned_to field has changed, alert the person whom the task is being assigned to
      if ($helper->fieldHasChanged($entity, 'field_task_assigned_to')) {
        // $helper->notifyAssignee($entity);
        \Drupal::logger('gary_custom')->error('would have notified assignee');

      }

    break;

    case 'opportunities':
      //bring over account manager from the builder account
      if (!$entity->isNew()) {
        $account_mgr = $helper->getDefaultAccountManagerIfNeeded($entity);
        if (!empty($account_mgr)) {
          $entity->set('field_account_manager', $account_mgr);
        }
      }

      //if cancelling or closing the opp, close all of its tasks
      if ($helper->fieldHasChanged($entity, 'field_opportunity_type')) {
        //cancelled tid 60 closed 61
        if (!$entity->get('field_opportunity_type')->isEmpty()) {
          $tid = $entity->get('field_opportunity_type')->getValue()[0]['target_id'];
          if ($tid == 60 || $tid == 61) {
            $helper->closeAllTasks($entity);
          }
        }
      }

    break;
    case 'projects':

      //if project is new, load its opportunity then its service
      //then load auto tasks associated with that service, create new
      //tasks and attach them to the project
      if ($entity->isNew()) {
        $new_nodes = $helper->createReturnAutoTasks($entity);
        if (!empty($new_nodes)) {
          //tasks were created
          $entity->set('field_tasks', $new_nodes);
        }
      }

      //if cancelling or completing the project, close all of its tasks
      if ($helper->fieldHasChanged($entity, 'field_project_status')) {
        //cancelled tid 70 completed 72
        if (!$entity->get('field_project_status')->isEmpty()) {
          $tid = $entity->get('field_project_status')->getValue()[0]['target_id'];
          if ($tid == 70 || $tid == 72) {
            $helper->closeAllTasks($entity);
          }
        }
      }
    break;
    default:
    break;
  }

}

function gary_custom_form_node_projects_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //if oid is set, were making a new project, load the opp node and load some values
  if (isset($_GET['oid'])) {
    $opportunity_id = $_GET['oid'];
    $node_storage = \Drupal::entityManager()->getStorage('node');
    $opportunity = $node_storage->load($opportunity_id);

    $fields = [
      'field_address',
      'field_city',
      'field_state',
      'field_zip',
      'field_account_reference'
    ];
    $er = FALSE;
    foreach ($fields as $field) {
      if (!$opportunity->hasField($field)) {
        $messenger = \Drupal::messenger();
        $messenger->addMessage('Fields are missing from the opportunity! Cannot set default values.', $messenger::TYPE_WARNING);
        \Drupal::logger('gary_custom')->error('Fields are missing on the opportunity, cannot create project');
        $er = TRUE;
      }
    }
    //if no errors then set default values
    if (!$er) {

      if (!$opportunity->get('field_account_reference')->isEmpty()) {
        $builder = $node_storage
          ->load($opportunity
          ->get('field_account_reference')
          ->getValue()[0]['target_id']);

        $form['field_account_reference']['widget'][0]['target_id']['#default_value']= $builder;
      }
      $form['title']['widget'][0]['value']['#default_value']= $opportunity->getTitle();
      $form['field_address']['widget'][0]['value']['#default_value']= $opportunity->field_address->value;
      $form['field_city']['widget'][0]['value']['#default_value']=$opportunity->field_city->value;
      $form['field_state']['widget'][0]['value']['#default_value']=$opportunity->field_state->value;
      $form['field_zip']['widget'][0]['value']['#default_value']=$opportunity->field_zip->value;
      $form['field_opportunity']['widget'][0]['target_id']['#default_value']= $opportunity;
    }
  }
}

function gary_custom_form_node_tasks_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // $form['notifyassignee'] = [
  //   '#type' => 'checkbox',
  //   '#title' => t('Notify assignee upon save'),
  //   '#default_value' => 0,
  //   '#weight' => 5
  // ];
}

function gary_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //use select2 type on these multiselect elements
  $multiselects = [
    'field_task_assigned_to_target_id',
    'field_project_status_target_id'
  ];

  foreach ($multiselects as $element) {
    if (isset($form[$element]) && $form[$element]['#type'] == 'select' && $form[$element]['#multiple']) {
      $form[$element]['#type'] = 'select2';
    }
  }

  if (isset($form['field_account_reference_target_id'])) {
    $form['field_account_reference_target_id']['#size'] = 30;
  }

  //Opportunity Services Calculation
  if ($form_id == 'inline_pg_form_field_opportunity_services_ref') {
    $form['#attached']['library'][] = 'gary_custom/service_price';

    //js listeners in js/service-price
    $form['container']['field_opportunity_service']['widget']['#attributes']['class'][] = "calculate-price";
    $form['container']['field_quantity']['widget'][0]['value']['#attributes']['class'][] = "update-price";
  }
}

/**
* Implements hook_mail().
*/
function gary_custom_mail($key, &$message, $params) {

 $options = array(
   'langcode' => $message['langcode'],
 );
 switch ($key) {

   //prepare email for comments tagged in opps or projects
   case 'notify_assignee':

     $message['from'] = \Drupal::config('system.site')->get('mail');
     $message['subject'] = t('A task was assigned to you: @account - @title', array(
      '@account' => $params['account_title'],
      '@title' => $params['parent_title']));

     $message['body'][] = t('@who has assigned a task to you: @ttitle', array(
      '@who' => $params['from_name'],
      '@ttitle' => $params['task_title']));

     $message['body'][] = '<br/>';
     $message['body'][] = t('Builder/Account: @account', array('@account' => $params['account_title']));
     $message['body'][] = '<br/>';
     $message['body'][] = t('Title/Project: @title', array('@title' => $params['parent_title']));
     $message['body'][] = '<br/>';

     $message['headers'] = [
      'content-type' => 'text/html',
      'MIME-Version' => '1.0',
      'reply-to' => $message['from'],
      'Return-Path' => $message['from'],
      'from' => 'Admin <'.$message['from'].'>'
     ];

     $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$params['task_id']);
     $host = \Drupal::request()->getSchemeAndHttpHost();
     $message['body'][] = t('Go here to view: @host@alias', array('@alias' => $alias, '@host' => $host));
   break;

   //prepare email for comment tags in tasks
   case 'comment_task_tag':

     $message['from'] = \Drupal::config('system.site')->get('mail');

     //Comment Tag: Account - Task Title (Project Title)
     $message['subject'] = t('Comment Tag: @account - @task_title (@parent_title)', array(
        '@account' => $params['account_title'],
        '@task_title' => $params['node_title'],
        '@parent_title' => $params['parent_title']));

     $message['body'][] = t('Posted by: @who', array('@who' => $params['poster_name']));
     $message['body'][] = '</br>';
     $message['body'][] = t('Builder/Account: @account', array('@account' => $params['account_title']));
     $message['body'][] = '</br>';
     $message['body'][] = t('Title/@bundle: @title (@parent_title)', array(
        '@title' => $params['node_title'],
        '@bundle' => ucfirst($params['parent_bundle']),
        '@parent_title' => $params['parent_title']));
     $message['body'][] = '</br>';
     $message['body'][] = t('Comment: @cbod', array('@cbod' => $params['body']));
     $message['body'][] = '</br>';

     $message['headers'] = [
      'content-type' => 'text/html',
      'MIME-Version' => '1.0',
      'reply-to' => $message['from'],
      'from' => 'Admin <'.$message['from'].'>'
     ];

     $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$params['node_id']);
     $host = \Drupal::request()->getSchemeAndHttpHost();
     $message['body'][] = t('Go here to view: @host@alias', array('@alias' => $alias, '@host' => $host));
   break;
 }
}


function gary_custom_page_attachments(array &$page) {
    $page['#attached']['library'][] = 'gary_custom/custom';
}

// function gary_custom_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
//   if ($view->id() == 'manage_service_tasks' && $display_id === 'block_2') {
//     $switch = [
//       '#markup' => '
//       <a class="use-ajax"
//         href="/toggle-hidden/block-views-blockmanage-service-tasks-block-2/block-views-blockmanage-service-tasks-block-1">
//         Switch ViewExecutable
//       </a>',
//     ];
//
//     $item = [
//       'id' => 'area',
//       'table' => 'views',
//       'field' => 'area',
//       'relationship' => 'none',
//       'group_type' => 'none',
//       'admin_label' => '',
//       'empty' => NULL,
//       'tokenize' => NULL,
//       'content' => [
//         'value' => render($switch),
//         'format' => "full_html",
//       ],
//       'plugin_id' => 'text',
//     ];
//
//     $view->setHandler('block_2', 'header', 'area', $item);
//   }
// }
