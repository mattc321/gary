<?php

/**
 * @file
 * Contains gary_custom.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\gary_custom\GaryFunctions;
use Drupal\Core\Form\FormStateInterface;
/**
 * Implements hook_help().
 */
function gary_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gary_custom module.
    case 'help.page.gary_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Primary Module for Custom Gary Code') . '</p>';
      return $output;

    default:
  }
}

function gary_custom_preprocess_node(&$variables) {

}

/**
 * Implements hook_theme().
 */
function gary_custom_theme() {
  return [
    'gary_custom' => [
      'render element' => 'children',
    ],
  ];
}

function gary_custom_entity_display_build_alter(&$build, $context) {

  //display empty fields and labels
  if ($context['entity']->getEntityTypeId() == 'node' && $context['view_mode'] == 'full') {
    $node = $context['entity'];
    $field_instances = \Drupal\Core\Entity\Entity\EntityViewDisplay::collectRenderDisplay($node, 'full')->getComponents();
    //hidden fields naturally wont be in $field_instances
    foreach ($field_instances as $field_name => $field_instance) {
      //make sure its a real existant field
      if ($node->hasField($field_name)) {
         if (empty($node->get($field_name)->getValue())) {
           $type = $node->$field_name->getFieldDefinition()->getType();
            if ($field_name != 'uid' && $type != 'comment' && $type != 'viewfield') {
              $label = $node->$field_name->getFieldDefinition()->getLabel();
              $label_display = $field_instance['label'];
              $weight = $field_instance['weight'];
              $is_multiple = FALSE;
              $build[$field_name] = array(
                '#theme' => 'field',
                '#title' => $label,
                '#label_display' => $label_display,
                '#view_mode' => 'full',
                '#language' => 'en',
                '#field_type' => $type,
                '#field_name' => $field_name,
                '#entity_type' => 'node',
                '#is_multiple' => $is_multiple,
                '#bundle' => $node->bundle(),
                '#object' => $node,
                '#items' => array(),
                '#weight' => $weight,
                '#comment_display_mode' => '',
                0 => array('#markup' => '&nbsp;'),
              );

            }
         }

      }

    }

  }
}

function gary_custom_entity_view(array &$build, EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  if ($entity->bundle() == 'projects') {
    $node_storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
    $node_ids = $node_storage->getQuery();

    // This returns all nodes with a value for *field_category*.
    $nodes = $node_ids->condition('type','projects')
      ->exists('field_permit_city')
      ->condition('status', 1)
      ->execute();
  }
}
function gary_custom_entity_delete(EntityInterface $entity) {
  $helper = new GaryFunctions;

  switch ($entity->bundle()){
    case 'opportunity_services':

      //update total amount on parent
      $helper->updateTotalAmount($entity);
    break;
  }

}
function gary_custom_entity_update(EntityInterface $entity) {
  $helper = new GaryFunctions;

  //remove any old revisions on parahraphs
  $helper->cleanParagraphs($entity);

  switch ($entity->bundle()){
    case 'opportunity_services':

      //update total amount on parent
      $helper->updateTotalAmount($entity);
    break;
  }
}

function gary_custom_entity_presave(EntityInterface $entity) {
  $helper = new GaryFunctions;

  //calculate fields on project_units
  switch ($entity->bundle()){
    case 'project_units':

      //calculate ach50 field if its there
      if ($entity->hasField('field_ach50')) {
        $new_value = $helper->calculateField($entity, 'field_ach50');
        $entity->set('field_ach50', $new_value);
      }

      //calculate ach50 field if its there
      if ($entity->hasField('field_volume')) {
        $new_value = $helper->calculateField($entity, 'field_volume');
        $entity->set('field_volume', $new_value);
      }

      //update last updated field if pg item has changed
      if ($helper->entityHasChanged($entity)) {
        if ($entity->hasField('field_last_updated')) {
          $dt = new DateTime;
          $date = $dt->format("Y-m-d");
          $entity->set('field_last_updated', $date);
        }
      }

    break;

    case 'opportunity_services':
    break;

    default:
    break;
  }

}

function gary_custom_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
}

function gary_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //use select2 type on these multiselect elements
  $multiselects = [
    'field_task_assigned_to_target_id',
    'field_project_status_target_id'
  ];

  foreach ($multiselects as $element) {
    if (isset($form[$element]) && $form[$element]['#type'] == 'select' && $form[$element]['#multiple']) {
      $form[$element]['#type'] = 'select2';
    }
  }

  if (isset($form['field_account_reference_target_id'])) {
    $form['field_account_reference_target_id']['#size'] = 30;
  }

  //Opportunity Services Calculation
  if ($form_id == 'inline_pg_form_field_opportunity_services_ref') {
    $form['#attached']['library'][] = 'gary_custom/service_price';

    //js listeners in js/service-price
    $form['container']['field_opportunity_service']['widget']['#attributes']['class'][] = "calculate-price";
    $form['container']['field_quantity']['widget'][0]['value']['#attributes']['class'][] = "update-price";
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function gary_custom_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type)  {
  // dpm($entity_type->id());
  // if ($entity_type->id() === 'paragraph') {
  //   $fields = [];
  //
  //   // Add a field that shows the completeness of the user profile.
  //   // This is computed whenever the profile changes, and then saved
  //   // to the database.
  //   $fields['completeness'] = BaseFieldDefinition::create('float')
  //     ->setLabel(t('Complete profile'))
  //     ->setDescription(t('User profile complete percentage, such as 0.40, i.e, 40%'))
  //     ->setDisplayOptions('view', [
  //       'label' => 'above',
  //       'weight' => -5,
  //     ]);
  //   //
  //   // // Add a field that shows a link to the user's current company.
  //   $fields['current_company'] = BaseFieldDefinition::create('current_company_link')
  //     ->setName('current_company')
  //     ->setLabel(t('Current company'))
  //     ->setComputed(TRUE)
  //     ->setClass('\Drupal\mymodule\CurrentCompanyLinkItemList')
  //     ->setDisplayConfigurable('view', TRUE)
  //     ->setDisplayOptions('view', [
  //       'label' => 'hidden',
  //       'weight' => -5,
  //     ]);
  //     ksm($fields);
  //   return $fields;
  // }
}
