<?php

/**
 * @file
 * Contains gary_custom.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;


/**
 * Implements hook_help().
 */
function gary_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gary_custom module.
    case 'help.page.gary_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Primary Module for Custom Gary Code') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function gary_custom_theme() {
  return [
    'gary_custom' => [
      'render element' => 'children',
    ],
  ];
}

function gary_custom_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  ksm($entity);
}

function gary_custom_entity_update(EntityInterface $entity) {
  // Check to make sure method exists.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }

  // Get all field definitions for this entity.
  $field_definitions = $entity->getFieldDefinitions();

  // Loop through each field definition looking for paragraphs.
  foreach ($field_definitions as $field_definition) {
    // Check if a paragraph field with revisions.
    if ($field_definition->getSetting('target_type') != 'paragraph' || $field_definition->getType() != 'entity_reference_revisions') {
      continue;
    }

    // Get field original ids.
    $original_ids = array_column($entity->original->{$field_definition->getName()}->getValue(), 'target_id');

    ksm($original_ids);

    // If no original ids, skip field.
    if (empty($original_ids)) {
      continue;
    }

    // Get field new ids.
    $new_ids = array_column($entity->{$field_definition->getName()}->getValue(), 'target_id');

    // Flag original ids not in new ids for deletion.
    $delete_ids = array_diff($original_ids, $new_ids);

    // Delete flagged ids.
    if (!empty($delete_ids)) {
      $storage_handler = \Drupal::entityTypeManager()->getStorage('paragraph');
      $entities = $storage_handler->loadMultiple($delete_ids);
      $storage_handler->delete($entities);
    }
  }
}
