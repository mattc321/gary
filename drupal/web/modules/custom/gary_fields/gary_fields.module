<?php


/**
 * @file
 * Contains gary_fields.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\gary_fields\Plugin\Field\FieldFormatter\EntityReverseFormatter;
/**
 * Implements hook_help().
 */
function gary_fields_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gary_fields module.
    case 'help.page.gary_fields':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom fields for Gary') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
 function gary_fields_theme() {
   return [
     'entity_reverse_output' => [
       'variables' => [
         'items' => NULL,
         'label' => NULL,
         'label_hidden' => NULL,
         'multiple' => NULL,
         'field_name' => NULL,
         'field_type' => NULL,
         'label_display' => NULL,
       ],
       'template' => 'entity-reverse-output'
     ]
   ];
 }

/**
 * implements hook_entity_display_build_alter()
 */
function gary_fields_entity_display_build_alter(&$build, $context) {

  //If no value exists yet we need to force display one using the same method as the field formatter
  if ($context['entity']->getEntityTypeId() == 'node') {
    $node = $context['entity'];
    $field_instances = EntityViewDisplay::collectRenderDisplay($node, 'default')->getComponents();

    foreach ($field_instances as $field_name => $field_instance) {
      //make sure its a real existant field
      if ($node->hasField($field_name)) {
        $type = $node->$field_name->getFieldDefinition()->getType();

         if ($type=='entity_reverse_lookup' && $node->$field_name->isEmpty()) {
           $parent_bundle_shared = $node->$field_name
             ->getFieldDefinition()
             ->getDefaultValueLiteral()[0]['parent_bundle_shared'];
            $parent_bundle = $node->$field_name
              ->getFieldDefinition()
              ->getDefaultValueLiteral()[0]['parent_bundle'];
            $parent_field_table = 'node__'.$node->$field_name
              ->getFieldDefinition()
              ->getDefaultValueLiteral()[0]['parent_field_name'];
            $parent_field_column = $node->$field_name
              ->getFieldDefinition()
              ->getDefaultValueLiteral()[0]['parent_field_name'].'_target_id';

            $results = EntityReverseFormatter::getReverseResults($parent_field_table, $parent_bundle, $parent_field_column, $node->id(), $parent_bundle_shared);
            $label = $node->$field_name->getFieldDefinition()->label();
            $label_display = $field_instance['label'];
            $weight = $field_instance['weight'];
            $is_multiple = FALSE;
            $entities_relating = [];
            $items = [];

            if (count($results) > 0) {
              foreach ($results as $key => $result) {
                $relating_node = \Drupal::entityTypeManager()
                  ->getStorage('node')
                  ->load($result->entity_id);
                $options = ['absolute' => FALSE];
                $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $relating_node->id()], $options)
                  ->toString();
                $entities_relating[$relating_node->id()]['title']=$relating_node->getTitle();
                $entities_relating[$relating_node->id()]['path']=$url;
              }

              foreach ($entities_relating as $delta => $item) {
                $items[$delta]['content'] = [
                  'title' => $item['title'],
                  'path' => $item['path']
                ];
              }

            }
            $is_multiple = (count($results) == 1 ? FALSE : TRUE);
            $build[$field_name] = array(
              '#theme' => 'entity_reverse_output',
              '#label' => $label,
              '#label_display' => $label_display,
              '#view_mode' => 'full',
              '#language' => 'en',
              '#field_type' => $type,
              '#field_name' => $field_name,
              '#entity_type' => 'node',
              '#multiple' => $is_multiple,
              '#bundle' => $node->bundle(),
              '#object' => $node,
              '#items' => $items,
              '#weight' => $weight,
              '#comment_display_mode' => '',
              0 => array('#markup' => ''),
            );
         }
      }
    }
  }
}
