<?php

/**
 * @file
 * Contains gary_import_scripts.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\comment\Entity\Comment;

/**
 * Implements hook_help().
 */
function gary_import_scripts_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gary_import_scripts module.
    case 'help.page.gary_import_scripts':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Gary Import Scripts') . '</p>';
      return $output;

    default:
  }
}

function attachServiceTasksToServices() {
  $nodes = serviceIds();
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  foreach ($nodes as $node_id => $auto_task_ids) {
      $node = $node_storage->load($node_id);
      if ($node->bundle() == 'services') {
        if ($node->hasField('field_service_tasks')) {
          $current = $node->get('field_service_tasks')->getValue();
          $auto_task_array = explode(',',$auto_task_ids);
          foreach ($auto_task_array as $old_auto_task_id) {
            $new_auto_task_id = getAutoTaskId($old_auto_task_id);
            if (!empty($new_auto_task_id)) {
              $current[] = [
                'target_id' => $new_auto_task_id
              ];
            } else {
              $messenger = \Drupal::messenger();
              $messenger->addMessage('COULD NOT FIND NEW ID!'.$old_auto_task_id, $messenger::TYPE_WARNING);
            }
          }
          $node->set('field_service_tasks', $current);
          $node->save();
        } else {
          // dpm('no field');
        }
      } else {
        // dpm('no bundle');
      }
  }
  // $entity->set('field_service_tasks', 6796);
  // $entity->set('field_service_tasks', 6820);
  // $entity->save();
}

function gary_import_scripts_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // ksm(count(autoTaskIds()));
  if (isset($_GET['process']) == 1 && $entity->id()=='6551') {
    $csv = array_map('str_getcsv', file('comments-children-export-ready-thurs.csv'));
    // $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    unset($csv[0]);
    // return;
    foreach ($csv as $key => $value) {
        // $user = $user_object->loadByProperties(['name' => $value[1]]);
        // $x = reset($user);
        \Drupal::logger('commentstag')->debug($key);

        $comment_values = [
          'entity_type' => 'node',            // required.
          'entity_id'   => $value[2],                // required.
          'field_name'  => 'field_comments',         // required.
          'uid' => $value[1],                         // required.
          'comment_type' => 'comment',        // required.
          'subject' => $value[0],  // required.
          'comment_body' => $value[6],            // optional.
          'status' => 1,                      // optional. Defaults to 0.
          'created' => strtotime($value[7]),
          'changed' => strtotime($value[7]),
          'field_comment_audit_id' => $value[4],                      // optional. Defaults to 0.
          'pid' => $value[5],
        ];
        $comment = Comment::create($comment_values);
        $comment->save();
    }
  }
}


function deleteAllContentOfType() {
  // $result = \Drupal::entityQuery('node')
  //   ->condition('type', 'messages')
  //   ->execute();
  // entity_delete_multiple('node', $result);
  // $resultt = \Drupal::entityQuery('comment')
  //   ->execute();
  // entity_delete_multiple('comment', $resultt);
}
