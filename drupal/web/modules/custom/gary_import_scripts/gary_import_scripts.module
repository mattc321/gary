<?php

/**
 * @file
 * Contains gary_import_scripts.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\paragraphs\Entity\Paragraph;
/**
 * Implements hook_help().
 */
function gary_import_scripts_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gary_import_scripts module.
    case 'help.page.gary_import_scripts':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Gary Import Scripts') . '</p>';
      return $output;

    default:
  }
}

function attachServiceTasksToServices() {
  $nodes = serviceIds();
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  foreach ($nodes as $node_id => $auto_task_ids) {
      $node = $node_storage->load($node_id);
      if ($node->bundle() == 'services') {
        if ($node->hasField('field_service_tasks')) {
          $current = $node->get('field_service_tasks')->getValue();
          $auto_task_array = explode(',',$auto_task_ids);
          foreach ($auto_task_array as $old_auto_task_id) {
            $new_auto_task_id = getAutoTaskId($old_auto_task_id);
            if (!empty($new_auto_task_id)) {
              $current[] = [
                'target_id' => $new_auto_task_id
              ];
            } else {
              $messenger = \Drupal::messenger();
              $messenger->addMessage('COULD NOT FIND NEW ID!'.$old_auto_task_id, $messenger::TYPE_WARNING);
            }
          }
          $node->set('field_service_tasks', $current);
          $node->save();
        } else {
          // dpm('no field');
        }
      } else {
        // dpm('no bundle');
      }
  }
  // $entity->set('field_service_tasks', 6796);
  // $entity->set('field_service_tasks', 6820);
  // $entity->save();
}

function gary_import_scripts_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // ksm(count(autoTaskIds()));
  if (isset($_GET['process']) == 1 && $entity->id()=='6551') {

  $csv = array_map('str_getcsv', file('projects-units-export-ready-tuesday.csv'));

  $new_array = [];
  $csv2 = $csv;
  unset($csv[0]);
  // ksm($csv2);
  foreach ($csv as $key => $value_array) {
    foreach ($value_array as $value_key => $value) {
      if ($value_key == 4) {
        if (isset($new_array[$value])) {
          $new_array[$value][] = [$csv2[$key]];
        } else {
          $new_array[$value] = [$csv2[$key]];
        }
        continue;
      }
    }

  }
  // ksm($new_array);
  // ksm($csv2[0][0]);
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  foreach ($new_array as $parent_id => $paragraphs) {

    $node = $node_storage->load($parent_id);
    $current = $node->get('field_project_units')->getValue();
    foreach ($paragraphs as $index => $paragraph_values) {
      $pg_item = Paragraph::create(['type' => 'project_units',]);
      if(is_array($paragraph_values[0])) {
        $paragraph_values = $paragraph_values[0];
      }
      if(trim($paragraph_values[0]) != "") {
        $pg_item->set('field_ach50', $paragraph_values[0]);
      }
      if(trim($paragraph_values[1]) != "") {
        $pg_item->set('field_beds', $paragraph_values[1]);
      }
      if(trim($paragraph_values[2]) != "") {
        $pg_item->set('field_cfa', $paragraph_values[2]);
      }
      if(trim($paragraph_values[3]) != "") {
        $pg_item->set('field_cfm_50', $paragraph_values[3]);
      }
      if(trim($paragraph_values[5]) != "") {
        $pg_item->set('field_description', $paragraph_values[5]);
      }
      if(trim($paragraph_values[6]) != "") {
        $pg_item->set('field_height', $paragraph_values[6]);
      }
      if(trim($paragraph_values[7]) != "") {
        $pg_item->set('field_mf_qty', $paragraph_values[7]);
      }
      if(trim($paragraph_values[8]) != "") {
        $pg_item->set('field_unit', $paragraph_values[8]);
      }
      if(trim($paragraph_values[9]) != "") {
        $pg_item->set('field_unit_types', $paragraph_values[9]);
      }
      if(trim($paragraph_values[10]) != "") {
        $pg_item->set('field_volume', $paragraph_values[10]);
      }
      //
      // $pg_item->set('field_beds', $paragraph_values[1]);
      // $pg_item->set('field_cfa', $paragraph_values[2]);
      // $pg_item->set('field_cfm_50', $paragraph_values[3]);
      // // $pg_item->set('parent_field_id', $paragraph_values[4]);
      // $pg_item->set('field_description', $paragraph_values[5]);
      // $pg_item->set('field_height', $paragraph_values[6]);
      // $pg_item->set('field_mf_qty', $paragraph_values[7]);
      // $pg_item->set('field_unit', $paragraph_values[8]);
      // $pg_item->set('field_unit_types', $paragraph_values[9]);
      // $pg_item->set('field_volume', $paragraph_values[10]);
      $pg_item->isNew();
      $pg_item->save();
      $current[] = array(
          'target_id' => $pg_item->id(),
          'target_revision_id' => $pg_item->getRevisionId(),
        );
    }


    $node->set('field_project_units', $current);
    $node->save();
  }
  }
}


function deleteAllContentOfType() {
  $result = \Drupal::entityQuery('node')
    ->condition('type', 'tasks')
    ->execute();
  // entity_delete_multiple('node', $result);
}
